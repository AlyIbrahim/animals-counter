# server.port = 8888

spring.mvc.dispatch-options-request=true

spring.datasource.url=jdbc:postgresql://localhost:5432/animals
spring.datasource.username=aly
spring.datasource.password=aly
spring.jpa.show-sql=true

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

management.endpoints.web.exposure.include=health,info,prometheus


# Cogntio oAuth Configuration

# spring.security.oauth2.client.registration.cognito.clientId=
# spring.security.oauth2.client.registration.cognito.clientSecret=
# spring.security.oauth2.client.registration.cognito.scope=openid,email
# spring.security.oauth2.client.registration.cognito.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.cognito.redirect-uri={baseUrl}/login/oauth2/code/cognito
# spring.security.oauth2.client.registration.cognito.clientName=
# spring.security.oauth2.client.provider.cognito.user-info-uri=<user info URL>
# spring.security.oauth2.client.provider.cognito.jwk-set-uri=<jwks URL>
# spring.security.oauth2.client.provider.cognito.token-uri=<token URL>
# spring.security.oauth2.client.provider.cognito.authorization-uri=<authorize URL>
# spring.security.oauth2.client.provider.cognito.userNameAttribute=sub
# spring.security.oauth2.client.provider.cognito.issuerUri=https://cognito-idp.{region}.amazonaws.com/{poolId}
# spring.security.oauth2.client.provider.cognito.user-name-attribute=<cognito:username>